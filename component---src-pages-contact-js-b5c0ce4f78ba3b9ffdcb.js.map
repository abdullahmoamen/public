{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/Layout.js","webpack://gatsby-starter-default/./src/pages/contact.js"],"names":["children","data","useStaticQuery","siteTitle","site","siteMetadata","title","useState","name","email","message","formState","setFormState","handleChange","e","target","value","encode","Object","keys","map","key","encodeURIComponent","join","className","onSubmit","fetch","method","headers","body","then","alert","catch","error","preventDefault","data-netlify","data-netlify-honeypot","type","htmlFor","onChange","required","id"],"mappings":"iLAgCA,IAxBe,SAAC,GAAkB,IAAD,EAAfA,EAAe,EAAfA,SACVC,GAAOC,QAAe,cAU5B,OACE,gCACE,gBAAC,IAAD,CAAQC,WAAW,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,cACnB,4BAAON,GACP,gBAAC,IAAD,S,0EC+GN,UAzHgB,WACd,OAAkCO,cAAS,CACzCC,KAAM,GACNC,MAAO,GACPC,QAAS,KAHJC,EAAP,KAAkBC,EAAlB,KAkBMC,EAAe,SAAAC,GAAM,IAAD,EACxBF,EAAa,OAAD,UACPD,IADO,MAETG,EAAEC,OAAOP,MAAOM,EAAEC,OAAOC,MAFhB,MAKRC,EAAS,SAAAhB,GACb,OAAOiB,OAAOC,KAAKlB,GAChBmB,KAAI,SAAAC,GAAG,OAAIC,mBAAmBD,GAAO,IAAMC,mBAAmBrB,EAAKoB,OACnEE,KAAK,MAaV,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKjB,MAAM,YACX,wBAAMkB,UAAU,QACd,2BAASA,UAAU,gBACjB,2BAASA,UAAU,gBACjB,mDACA,6IAIA,mFACA,sJAKF,+BACE,wBACEC,SArDS,SAAAX,GACnBY,MAAM,IAAK,CACTC,OAAQ,OACRC,QAAS,CAAE,eAAgB,qCAC3BC,KAAMZ,EAAO,OAAD,QAAG,YAAa,WAAcN,MAEzCmB,MAAK,kBAAMC,MAAM,4CACjBC,OAAM,SAAAC,GAAK,OAAIF,MAAME,MAExBnB,EAAEoB,kBA6CQV,UAAU,oBAIVhB,KAAK,UACLmB,OAAO,OACPQ,eAAa,OACbC,wBAAsB,aAEtB,yBAAOC,KAAK,SAAS7B,KAAK,YAAYQ,MAAM,YAC5C,uBAAKQ,UAAU,YACb,yBAAOc,QAAQ,QAAf,aACA,yBACEC,SAAU1B,EACVG,MAAOL,EAAUH,KACjBgC,UAAQ,EACRH,KAAK,OACL7B,KAAK,OACLiC,GAAG,UAKP,uBAAKjB,UAAU,YACb,yBAAOc,QAAQ,SAAf,cACA,yBACEC,SAAU1B,EACVG,MAAOL,EAAUF,MACjB+B,UAAQ,EACRH,KAAK,QACL7B,KAAK,QACLiC,GAAG,WAKP,uBAAKjB,UAAU,YACb,yBAAOc,QAAQ,WAAf,WACA,4BACEC,SAAU1B,EACVG,MAAOL,EAAUD,QACjB8B,UAAQ,EACRH,KAAK,OACL7B,KAAK,UACLiC,GAAG,aAKP,0BAAQJ,KAAK,SAASb,UAAU,aAAhC","file":"component---src-pages-contact-js-b5c0ce4f78ba3b9ffdcb.js","sourcesContent":["import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport \"../assets/css/home.css\"\nimport \"normalize.css\"\nimport Header from \"./header\"\nimport Footer from './footer'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Digitopia`} />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React, { useState } from \"react\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/seo\"\nimport \"./styles/contact.css\"\n// import { useForm } from \"react-hook-form\"\n// import { yupResolver } from \"@hookform/resolvers/yup\"\n// import * as yup from \"yup\"\n\n// const schema = yup.object().shape({\n//   name: yup.string().required(\"name is required\").min(3),\n//   email: yup.string().email().required(\"email is required\"),\n//   msg: yup.string().required(\"you must provide a message\").min(6),\n// })\nconst Contact = () => {\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  })\n\n  const handleSubmit = e => {\n    fetch(\"/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: encode({ \"form-name\": \"contact\", ...formState }),\n    })\n      .then(() => alert(\"Your message is sent successfullyðŸ˜‰ !\"))\n      .catch(error => alert(error))\n\n    e.preventDefault()\n  }\n\n  const handleChange = e => {\n    setFormState({\n      ...formState,\n      [e.target.name]: e.target.value,\n    })\n  }\n  const encode = data => {\n    return Object.keys(data)\n      .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n      .join(\"&\")\n  }\n  // const {\n  //   register,\n  // handleSubmit,\n  //   formState: { errors },\n  // } = useForm({\n  //   resolver: yupResolver(schema),\n  // })\n  // const onSubmit = data => alert(JSON.stringify(data))\n\n  // const { name, email, message } = formState\n\n  return (\n    <Layout>\n      <Seo title=\"Contact\" />\n      <main className=\"page\">\n        <section className=\"contact-page\">\n          <article className=\"contact-info\">\n            <h3>Want To Get In Touch?</h3>\n            <p>\n              Four dollar toast biodiesel plaid salvia actually pickled banjo\n              bespoke mlkshk intelligentsia edison bulb synth.\n            </p>\n            <p>Cardigan prism bicycle rights put a bird on it deep v.</p>\n            <p>\n              Hashtag swag health goth air plant, raclette listicle fingerstache\n              cold-pressed fanny pack bicycle rights cardigan poke.\n            </p>\n          </article>\n          <article>\n            <form\n              onSubmit={handleSubmit}\n              className=\"form contact-form\"\n              // action=\"https://formspree.io/f/moqywloj\"\n              // method=\"POST\"\n              // onSubmit={handleSubmit(onSubmit)}\n              name=\"contact\"\n              method=\"POST\"\n              data-netlify=\"true\"\n              data-netlify-honeypot=\"bot-field\"\n            >\n              <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n              <div className=\"form-row\">\n                <label htmlFor=\"name\">your name</label>\n                <input\n                  onChange={handleChange}\n                  value={formState.name}\n                  required\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  // {...register(\"name\")}\n                />\n                {/* <p style={{ color: \"red\" }}>{errors.name?.message}</p> */}\n              </div>\n              <div className=\"form-row\">\n                <label htmlFor=\"email\">your email</label>\n                <input\n                  onChange={handleChange}\n                  value={formState.email}\n                  required\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  // {...register(\"email\")}\n                />\n                {/* <p style={{ color: \"red\" }}>{errors.email?.message}</p> */}\n              </div>\n              <div className=\"form-row\">\n                <label htmlFor=\"message\">message</label>\n                <textarea\n                  onChange={handleChange}\n                  value={formState.message}\n                  required\n                  type=\"text\"\n                  name=\"message\"\n                  id=\"message\"\n                  // {...register(\"msg\")}\n                />\n                {/* <p style={{ color: \"red\" }}>{errors.msg?.message}</p> */}\n              </div>\n              <button type=\"submit\" className=\"btn block\">\n                submit\n              </button>\n            </form>\n          </article>\n        </section>\n      </main>\n    </Layout>\n  )\n}\n\nexport default Contact\n"],"sourceRoot":""}